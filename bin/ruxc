#! /usr/bin/env ruby

$:.push(File.expand_path('./lib'))

require 'pathname'
require 'optparse'
require 'rux'

class RuxCLI
  def self.parse(argv)
    if argv.empty?
      puts 'Please pass a file or directory to transpile'
      exit 1
    end

    options = {
      recursive: false,
      sourcemaps: true
    }

    if argv.first != '-h' && argv.first != '--help'
      options[:in_path] = argv.shift
    end

    parser = OptionParser.new do |opts|
      opts.banner = "Usage: ruxc path [options]"

      oneline(<<~DESC).tap do |desc|
        Emit sourcemaps for transpiled rux files (default: #{options[:sourcemaps]}).
      DESC
        opts.on('-m', '--[no-]sourcemaps', desc) do |sourcemaps|
          options[:sourcemaps] = sourcemaps
        end
      end

      opts.on('-h', '--help', 'Prints this help info') do
        puts opts
        exit
      end
    end

    parser.parse(argv)
    new(options)
  end

  def self.oneline(str)
    str.split("\n").join(' ')
  end

  def initialize(options)
    @options = options
  end

  def validate
    unless File.exist?(in_path)
      puts "Could not find file at '#{in_path}'"
      exit 1
    end
  end

  def each_file(&block)
    files = if in_path.directory?
      in_path.glob(File.join('**', '*.rux'))
    else
      [in_path]
    end

    files.each do |file|
      ruby_file = file.sub_ext('.rb')
      yield file.to_s, ruby_file.to_s
    end
  end

  def in_path
    @in_path ||= Pathname(@options[:in_path]).expand_path
  end

  def emit_sourcemaps?
    @options[:sourcemaps]
  end

  private

  def directory?
    File.directory?(in_path)
  end
end

cli = RuxCLI.parse(ARGV)
cli.validate

cli.each_file do |in_file, out_file, rbi_file|
  rux_file = Rux::File.new(in_file)
  ruby_code, context = rux_file.to_ruby

  ::File.write(rux_file.default_outfile, ruby_code)
  puts "Wrote #{rux_file.default_outfile}"

  if cli.emit_sourcemaps?
    ::File.write(
      rux_file.default_sourcemap_file,
      context[:source_map].to_sourcemap.to_json
    )

    puts "Wrote #{rux_file.default_sourcemap_file}"
  end
end
