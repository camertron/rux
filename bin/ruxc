#! /usr/bin/env ruby

$:.push(File.expand_path('./lib'))

require 'pathname'
require 'optparse'
require 'rux'
require 'onload'

class RuxCLI
  def self.parse(argv)
    if argv.empty?
      puts 'Please pass a file or directory to transpile'
      exit 1
    end

    options = {
      pretty: true,
      stdout: false,
      ignore_path: nil,
    }

    if argv.first != '-h' && argv.first != '--help'
      options[:in_path] = argv.shift
    end

    parser = OptionParser.new do |opts|
      opts.banner = "Usage: ruxc path [options]"

      oneline(<<~DESC).tap do |desc|
        Prettify generated Ruby code (default: #{options[:pretty]}).
      DESC
        opts.on('-p', '--[no-]pretty', desc) do |pretty|
          options[:pretty] = pretty
        end
      end

      oneline(<<~DESC).tap do |desc|
        Print results to STDOUT instead of writing files to disk.
      DESC
        opts.on('-o', '--stdout', desc) do |stdout|
          options[:stdout] = stdout
        end
      end

      oneline(<<~DESC).tap do |desc|
        Update the given git ignore file with transpiled file paths.
      DESC
        opts.on('-i', '--ignore-path=PATH', desc) do |ignore_path|
          options[:ignore_path] = ignore_path
        end
      end

      opts.on('-h', '--help', 'Prints this help info') do
        puts opts
        exit
      end
    end

    parser.parse(argv)
    new(options)
  end

  def self.oneline(str)
    str.split("\n").join(' ')
  end

  def initialize(options)
    @options = options
  end

  def validate
    unless File.exist?(in_path)
      puts "Could not find file at '#{in_path}'"
      exit 1
    end
  end

  def each_file(&block)
    files = if in_path.directory?
      in_path.glob(File.join('**', '*.rux'))
    else
      [in_path]
    end

    files.each do |file|
      ruby_file = file.sub_ext('.rb')
      yield file, ruby_file
    end
  end

  def in_path
    @in_path ||= Pathname(@options[:in_path]).expand_path
  end

  def pretty?
    @options[:pretty]
  end

  def write_to_stdout?
    @options[:stdout]
  end

  def ignore_file
    return nil unless ignore_path
    @ignore_file ||= Onload::IgnoreFile.load(ignore_path)
  end

  private

  def ignore_path
    @options[:ignore_path]
  end

  def directory?
    File.directory?(in_path)
  end
end

cli = RuxCLI.parse(ARGV)
cli.validate

at_exit do
  cli.ignore_file&.persist!
end

cli.each_file do |in_file, out_file|
  rux_file = Rux::File.new(in_file)

  if cli.write_to_stdout?
    puts rux_file.to_ruby(pretty: cli.pretty?)
  else
    rux_file.write(out_file, pretty: cli.pretty?)
    puts "Wrote #{out_file}"

    cli.ignore_file&.add(out_file)
  end
end
